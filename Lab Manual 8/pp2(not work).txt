[org 0x0100]
jmp start
string: db 'Muhammad Hassaan Raza Chaudhry', 0 ;null-terminated

;-------------------------------
calculatePosition:
push bp
mov bp, sp
push ax
push bx
push cx
push dx
push di
push si

mov ax, 80
mul word[bp+6]
add ax, [bp+4]
shl ax, 1
mov word[bp+8], ax  ;return value

pop si
pop di
pop dx
pop cx
pop bx
pop ax
pop bp
ret 4

;-------------------------------
clrScreen:
push bp
mov bp, sp
push ax
push cx
push si
push di
push es

mov ax, 0xb800
mov es, ax
mov di, 0
mov ax, 0x0720 ;space on black background
mov cx, 2000

cld ;auto-increment mode
rep stosw

pop es
pop di
pop si
pop cx
pop ax
pop bp
ret

;-------------------------------
strLen: 
push bp
mov bp, sp
push ax
push bx
push cx
push dx
push si
push di
push es
push ds

les di, [bp+4]
mov al, 0
mov cx, 0xffff
repne scasb
mov ax, 0xffff
sub ax, cx
dec ax
mov [bp+8], ax

pop ds
pop es
pop di
pop si
pop dx
pop cx
pop bx
pop ax
pop bp
ret 4
;-------------------------------
tokenizeString:
push bp
mov bp, sp
push ax
push bx
push cx
push dx
push si
push di
push es
push ds

;find the lenght of the string
push 0xffff
push ds
push string
call strLen
pop dx ;contains the lenght of the string
mov cx, dx ;cx acts as a counter
cmp cx, 0
jz exit

mov al, ' ' ;tokenizing character
mov bx, 0
mov dx, 0
push word[bp+4]
push word[bp+6]

next:
les di, [bp+4]
cld
mov cx, 0xffff
repne scasb 
mov ax, 0xffff
sub ax, cx;lenght of token in 

;print the token
mov si, bx
sub si, dx
push cx
mov cx, dx
push ax
mov ax, 0xb800
mov es, ax
pop ax
mov di, 0
cld
rep movsb
pop cx
mov dx, 0xffff ;dx=0 after skip

skip:
inc dx ;size of current token
inc bx ;i
loop next

;print the end token

exit:
pop ds
pop es
pop di
pop si
pop dx
pop cx
pop bx
pop ax
pop bp
ret 4
;-------------------------------

start:
call clrScreen

push ds
push string
call tokenizeString

mov ax, 0x4c00
int 0x21