[org 0x0100]
jmp start
pinArr: db 2, 4, 6, 1, 0
minVal: db 5, 2, 4, 1, 3
maxVal: db 9, 5, 8, 4, 6
validStr: db 'Valid'
invalidStr: db 'Invalid'
;-------------------------------------------------

printStr:
push bp
mov bp, sp
push ax
push bx
push cx
push dx
push di
push si
push ds

push 0xffff
push word[bp+10]
push word[bp+8]
call calculatePosition
pop di

mov ax, 0xb800
mov es, ax
mov si, [bp+4]
mov cx, [bp+6]
mov ah, 0x07
nextChar:
mov al, [si]
mov word[es:di], ax
inc si
add di, 2
loop nextChar

pop ds
pop si
pop di
pop dx
pop cx
pop bx
pop ax
pop bp
ret 8
;-------------------------------------------------

calculatePosition:
push bp
mov bp, sp
push ax
push bx
push cx
push dx
push di
push si
push ds

mov dx, 80
mov ax, [bp+6]
mul dx
add ax, [bp+4]
shl ax, 1
mov word[bp+8], ax

pop ds
pop si
pop di
pop dx
pop cx
pop bx
pop ax
pop bp
ret 4
;-------------------------------------------------

printValidity:
push bp
mov bp, sp
push ax
push bx
push cx
push dx
push di
push si
push ds

mov ax, [bp+8]
cmp ax, 0
jne inVal
Val:
mov dx, validStr
mov cx, 5
jmp printOnScreen
inVal:
mov dx, invalidStr
mov cx, 7

printOnScreen:
push word[bp+6]
push word[bp+4]
push cx
push dx
call printStr

pop ds
pop si
pop di
pop dx
pop cx
pop bx
pop ax
pop bp
ret 6
;-------------------------------------------------

validatePin:
push bp
mov bp, sp
;push ax
push bx
push cx
push dx
push di
push si
push ds

mov di, 0
mov bx, [bp+4]
outer:
mov dh, [bx+di]
cmp dh, [minVal+di]
jb inValid
cmp dh, [maxVal+di]
ja inValid
inc di
cmp di, 5
jne outer

valid:
;no invalid jump generated
mov ax, 0
jmp exit

inValid:
inc di
mov ax, di ;returns the invalid digits position

exit:
pop ds
pop si
pop di
pop dx
pop cx
pop bx
;pop ax
pop bp
ret 2
;-------------------------------------------------

clrScreen:
push bp
mov bp, sp
push ax
push di

mov ax, 0xB800 ;display memory block starting physical address
mov es, ax
mov di, 0
mov ax, 0x0720 ;background is black, foreground is space char so empty slot
nxtChar:
mov word[es:di], ax
add di, 2
cmp di, 4000
jne nxtChar

pop di
pop ax
pop bp
ret
;-------------------------------------------------

calculateLenght:
push bp
mov bp, sp
push ax
push bx
push cx
push dx
push di
push si
push ds

mov di, [bp+6]
mov cx, 0
mov ax, 0
mov ax, [bp+4] ;terminating char
l2:
cmp byte[di], al
je exit1
inc cx
inc di
jmp l2

exit1:
mov word[bp+8], cx ;return value
pop ds
pop si
pop di
pop dx
pop cx
pop bx
pop ax
pop bp
ret 4

printTermStr:
push bp
mov bp, sp
push ax
push bx
push cx
push dx
push di
push si
push ds

push 0xffff
push word[bp+10]
push word[bp+8]
call calculatePosition
pop di

mov ax, 0xb800
mov es, ax
push 0xffff
push word[bp+6]
push word[bp+4]
call calculateLenght
pop cx
mov si, [bp+6]
mov ah, 0x07
nChar:
mov al, [si]
add al, '0'
mov word[es:di], ax
inc si
add di, 2
loop nChar

pop ds
pop si
pop di
pop dx
pop cx
pop bx
pop ax
pop bp
ret 8

start:

call clrScreen
; ;FIRST CALL
; mov byte[pinArr], 5
; mov byte[pinArr+1], 2
; mov byte[pinArr+2], 4
; mov byte[pinArr+3], 1
; mov byte[pinArr+4], 3
; push pinArr
; call validatePin
; push ax
; push 1
; push 2
; call printValidity

; ;SECOND CALL
; mov byte[pinArr], 4
; mov byte[pinArr+1], 3
; mov byte[pinArr+2], 5
; mov byte[pinArr+3], 3
; mov byte[pinArr+4], 4
; push pinArr
; call validatePin
; push ax
; push 3
; push 2
; call printValidity

; ;THIRD CALL
; mov byte[pinArr], 6
; mov byte[pinArr+1], 3
; mov byte[pinArr+2], 3
; mov byte[pinArr+3], 1
; mov byte[pinArr+4], 4
; push pinArr
; call validatePin
; push ax
; push 5
; push 2
; call printValidity

; ;FOURTH CALL
; mov byte[pinArr], 6
; mov byte[pinArr+1], 3
; mov byte[pinArr+2], 4
; mov byte[pinArr+3], 1
; mov byte[pinArr+4], 8
; push pinArr
; call validatePin
; push ax
; push 7
; push 2
; call printValidity

push 10
push 10
push pinArr
push 0
call printTermStr


mov ax, 0x4c00
int 0x21