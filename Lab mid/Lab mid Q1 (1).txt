[org 0x0100]
jmp start
key: db -2,4,1,0,-3,5,2,-4,-4,6
plainText: db 'Your encrypted message displays here', 0
key1: db 1,3,4,4,-1,-6,-3,1,2,6
plainText1: db 'My name is Muhammad Hassaan RazaMHR', 0
;-------------------------------------------------

clrScreen:
push bp
mov bp, sp
push ax
push di

mov ax, 0xB800 ;display memory block starting physical address
mov es, ax
mov di, 0
mov ax, 0x0720 ;background is black, foreground is space char so empty slot
nxtChar:
mov word[es:di], ax
add di, 2
cmp di, 4000
jne nxtChar

pop di
pop ax
pop bp
ret
;-------------------------------------------------

twosComplement:
push bp
mov bp, sp
push ax
push bx
push cx
push dx
push di
push si
push ds

mov ax, [bp+4]
xor ax, 0xffff ;inversion i.e one complement
inc ax
mov word[bp+6], ax

pop ds
pop si
pop di
pop dx
pop cx
pop bx
pop ax
pop bp
ret
;-------------------------------------------------

printStr:
push bp
mov bp, sp
push ax
push bx
push cx
push dx
push di
push si
push ds

push 0xffff
push word[bp+10]
push word[bp+8]
call calculatePosition
pop di

mov ax, 0xb800
mov es, ax
mov si, [bp+4]
mov cx, [bp+6]
mov ah, 0x07
nextChar:
mov al, [si]
mov word[es:di], ax
inc si
add di, 2
loop nextChar

pop ds
pop si
pop di
pop dx
pop cx
pop bx
pop ax
pop bp
ret 8

;-------------------------------------------------

calculatePosition:
push bp
mov bp, sp
push ax
push bx
push cx
push dx
push di
push si
push ds

mov dx, 80
mov ax, [bp+6]
mul dx
add ax, [bp+4]
shl ax, 1
mov word[bp+8], ax

pop ds
pop si
pop di
pop dx
pop cx
pop bx
pop ax
pop bp
ret 4
;-------------------------------------------------

encryptData:
push bp
mov bp, sp
push ax
push bx
push cx
push dx
push di
push si
push ds

mov di, 0 ;key
mov si, 0 ;text
l1:
mov ax, 0
mov al, [key+si]
cmp al, 0
jge shiftRight
shiiftLeft:
push ax
call twosComplement
pop ax
mov cl, al
shl byte[plainText+di], cl
jmp nxt

shiftRight:
mov cl, al
shr byte[plainText+di], cl
nxt:
inc si
cmp si, 10
jne skip
mov si, 0
skip:
inc di
cmp byte[plainText+di], 0
jne l1

push 10
push 20
push 36
push plainText
call printStr

pop ds
pop si
pop di
pop dx
pop cx
pop bx
pop ax
pop bp
ret
;-------------------------------------------------

encryptData1:
push bp
mov bp, sp
push ax
push bx
push cx
push dx
push di
push si
push ds

mov di, 0 ;key
mov si, 0 ;text
l4:
mov ax, 0
mov al, [key1+si]
cmp al, 0
jge shiftRight1
shiiftLeft1:
push ax
call twosComplement
pop ax
mov cl, al
shl byte[plainText1+di], cl
jmp nxt1
shiftRight1:
mov cl, al
shr byte[plainText1+di], cl
nxt1:
inc si
cmp si, 10
jne skip1
mov si, 0
skip1:
inc di
cmp byte[plainText1+di], 0
jne l4

push 30
push 20
push 36
push plainText1
call printStr

pop ds
pop si
pop di
pop dx
pop cx
pop bx
pop ax
pop bp
ret
;-------------------------------------------------

start:
call clrScreen
;FIRST CALL
call encryptData

mov ah, 0
int 0x16  ;getChar() i.e. press key to continue

;SECOND call
call encryptData1

mov ax, 0x4c00
int 0x21