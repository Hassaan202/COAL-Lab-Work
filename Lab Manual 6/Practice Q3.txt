[org 0x0100]

jmp start
;Global Variables
startingBit: dw 235
num: db 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32
val: dw 8
; xyz: times 256 dw 0 (syntax to create a buffer)
;---------------------------------------------------

start:
mov ax, word[startingBit]
div word[val]
cmp dx, 0
je multipleOfEight

notMultipleOfEight:
;ax is quotient
;dx is rem
clc
;finding the required bits of the first byte
mov si, ax 
mov cx, [val]
sub cx, dx
dec cx
mov di, 2
shl di, cl
dec di ;mask for the first byte
mov al, [num+si]
and ax, di
mov cx, dx
shl ax, cl
;finding the required bits for the second byte
mov bx, 2
shl bx, cl
mov di, 256
sub di, bx ;mask for second byte
mov bl, [num+si+1]
and bx, di
mov cl, [val]
sub cx, dx
shr bx, cl
;take or of both
or ax, bx
jmp en


multipleOfEight:
mov bx, ax
mov ax, 0
mov al, [num+bx]

en:
mov ax, 0x4c00
int 0x21